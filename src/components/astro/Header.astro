---
import ThemeToggle from '@components/react/ThemeToggle.tsx';

interface NavLink {
  label: string;
  href: string;
  targetId?: string;
}

interface LanguageOption {
  label: string;
  href: string;
  active: boolean;
}

interface Props {
  brand: string;
  navLinks: NavLink[];
  ctaLabel: string;
  ctaHref: string;
  languages: LanguageOption[];
}

const { brand, navLinks, ctaHref, ctaLabel, languages } = Astro.props as Props;
---
<header data-site-header data-state="top" class="site-header">
  <div class="mx-auto flex max-w-6xl flex-col px-4 md:flex-row md:items-center md:justify-between md:space-y-0">
    <div class="flex w-full items-center justify-between md:w-auto">
      <a href="/" class="text-xl font-bold text-gradient">
        {brand}
      </a>
      <button
        type="button"
        class="inline-flex h-10 w-10 items-center justify-center rounded-md border border-border text-foreground transition hover:bg-muted md:hidden"
        aria-controls="mobile-menu"
        aria-expanded="false"
        data-menu-button
      >
        <svg class="h-5 w-5" viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="1.5">
          <path d="M3 6h14M3 10h14M3 14h14" stroke-linecap="round" stroke-linejoin="round" />
        </svg>
        <span class="sr-only">Open navigation</span>
      </button>
    </div>

    <nav class="hidden items-center gap-8 text-sm font-medium text-muted-foreground md:flex">
      {navLinks.map((link) => (
        <a
          class="transition hover:text-foreground"
          href={link.href}
          data-scroll-target={link.targetId}
        >
          {link.label}
        </a>
      ))}
    </nav>

    <div class="hidden items-center gap-3 md:flex">
      <div class="flex items-center gap-1 rounded-full border border-border bg-card px-2 py-1 text-xs font-semibold text-muted-foreground">
        {languages.map((language) => (
          <a
            href={language.href}
            class={`rounded-full px-2 py-1 transition ${
              language.active
                ? 'pointer-events-none bg-primary text-primary-foreground shadow-sm'
                : 'hover:text-foreground'
            }`}
            aria-current={language.active ? 'true' : 'false'}
          >
            {language.label}
          </a>
        ))}
      </div>
      <ThemeToggle client:idle />
      <a
        class="inline-flex items-center gap-2 rounded-full bg-primary px-5 py-2 text-sm font-semibold text-primary-foreground shadow transition hover:bg-primary/90 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary"
        href={ctaHref}
        target="_blank"
        rel="noopener noreferrer"
      >
        <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"/>
        </svg>
        {ctaLabel}
      </a>
    </div>
  </div>

  <div id="mobile-menu" class="border-t border-border bg-background/95 px-4 pb-4 pt-2 md:hidden hidden" data-mobile-menu>
    <nav class="flex flex-col gap-4 text-sm font-medium text-muted-foreground">
      {navLinks.map((link) => (
        <a
          class="transition hover:text-foreground"
          href={link.href}
          data-menu-close
          data-scroll-target={link.targetId}
        >
          {link.label}
        </a>
      ))}
    </nav>
    <div class="mt-4 flex items-center justify-between">
      <div class="flex items-center gap-1 rounded-full border border-border bg-card px-2 py-1 text-xs font-semibold text-muted-foreground">
        {languages.map((language) => (
          <a
            href={language.href}
            class={`rounded-full px-2 py-1 transition ${
              language.active
                ? 'pointer-events-none bg-primary text-primary-foreground shadow-sm'
                : 'hover:text-foreground'
            }`}
            aria-current={language.active ? 'true' : 'false'}
            data-menu-close={!language.active}
          >
            {language.label}
          </a>
        ))}
      </div>
      <ThemeToggle client:idle />
    </div>
    <a
      class="mt-4 inline-flex w-full items-center justify-center gap-2 rounded-full bg-primary px-5 py-3 text-sm font-semibold text-primary-foreground shadow transition hover:bg-primary/90 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary"
      href={ctaHref}
      target="_blank"
      rel="noopener noreferrer"
      data-menu-close
    >
      <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"/>
      </svg>
      {ctaLabel}
    </a>
  </div>
</header>

<script type="module" is:inline>
  const button = document.querySelector('[data-menu-button]');
  const menu = document.querySelector('[data-mobile-menu]');
  const header = document.querySelector('[data-site-header]');

  const closeMenu = () => {
    if (menu && button) {
      menu.classList.add('hidden');
      button.setAttribute('aria-expanded', 'false');
    }
  };

  if (button && menu) {
    button.addEventListener('click', () => {
      if (menu.classList.contains('hidden')) {
        menu.classList.remove('hidden');
        button.setAttribute('aria-expanded', 'true');
      } else {
        closeMenu();
      }
    });

    menu.querySelectorAll('[data-menu-close]').forEach((link) => {
      link.addEventListener('click', closeMenu);
    });
  }

  const getHeaderOffset = () => (header ? header.offsetHeight + 12 : 72);

  const scrollLinks = document.querySelectorAll('[data-scroll-target]');
  scrollLinks.forEach((link) => {
    link.addEventListener('click', (event) => {
      const targetId = link.getAttribute('data-scroll-target');
      if (!targetId) return;
      const targetElement = document.getElementById(targetId);
      if (targetElement) {
        event.preventDefault();
        const offset = getHeaderOffset();
        const top = targetElement.getBoundingClientRect().top + window.scrollY - offset;
        window.scrollTo({ top, behavior: 'smooth' });
        closeMenu();
      }
    });
  });

  const updateHeaderState = () => {
    if (!header) return;
    const threshold = 32;
    if (window.scrollY > threshold) {
      header.setAttribute('data-state', 'scrolled');
    } else {
      header.setAttribute('data-state', 'top');
    }
  };

  updateHeaderState();
  window.addEventListener('scroll', updateHeaderState, { passive: true });
</script>

<style is:global>
  .site-header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 40;
    width: 100%;
    padding-block: 1.5rem;
    background-color: transparent;
    border-bottom: 1px solid transparent;
    transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease, padding 0.3s ease, backdrop-filter 0.3s ease;
  }

  .site-header[data-state='scrolled'] {
    background-color: color-mix(in srgb, var(--color-background) 95%, transparent);
    border-color: var(--color-border);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
    backdrop-filter: blur(12px);
    padding-block: 1rem;
  }

  .dark .site-header[data-state='scrolled'] {
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.4);
  }
</style>
